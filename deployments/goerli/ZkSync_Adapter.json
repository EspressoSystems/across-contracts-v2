{
  "address": "0x071714ca6535185d4A4e8525EAd8F7D43fD26f3d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TokensRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txHash",
          "type": "bytes32"
        }
      ],
      "name": "ZkSyncMessageRelayed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ergsLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getL1CallValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Weth",
      "outputs": [
        {
          "internalType": "contract WETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2GasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "relayMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "relayTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkErc20Bridge",
      "outputs": [
        {
          "internalType": "contract ZkBridgeLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkEthBridge",
      "outputs": [
        {
          "internalType": "contract ZkBridgeLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkSync",
      "outputs": [
        {
          "internalType": "contract ZkSyncLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xea3eac1d47aed49dd4df7091ac201e0a6a8ce866d0156c30752df608b695fbb9",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x071714ca6535185d4A4e8525EAd8F7D43fD26f3d",
    "transactionIndex": 12,
    "gasUsed": "980572",
    "logsBloom": "0x
    "blockHash": "0x3172468323a243f4d9e6b88be8a95fc9266306e140bbc58232566ce6e5dca9a6",
    "transactionHash": "0xea3eac1d47aed49dd4df7091ac201e0a6a8ce866d0156c30752df608b695fbb9",
    "logs": [],
    "blockNumber": 7371093,
    "cumulativeGasUsed": "4305237",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6f2837d4a3b71ee9ce7179486eec7c62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokensRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"ZkSyncMessageRelayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ergsLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1CallValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Weth\",\"outputs\":[{\"internalType\":\"contract WETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2GasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkErc20Bridge\",\"outputs\":[{\"internalType\":\"contract ZkBridgeLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkEthBridge\",\"outputs\":[{\"internalType\":\"contract ZkBridgeLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkSync\",\"outputs\":[{\"internalType\":\"contract ZkSyncLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain-adapters/ZkSync_Adapter.sol\":\"ZkSync_Adapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@matterlabs/zksync-contracts/l1/contracts/zksync/Operations.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\n\\n\\n/// @notice Priority Operation container\\n/// @param canonicalTxHash Hashed priority operation data that is needed to process the operation\\n/// @param expirationBlock Expiration block number (ETH block) for this request (must be satisfied before)\\n/// @param layer2Tip Additional payment to the operator as an incentive to perform the operation\\nstruct PriorityOperation {\\n    bytes32 canonicalTxHash;\\n    uint64 expirationBlock;\\n    uint192 layer2Tip;\\n}\\n\\n/// @notice A structure that stores all priority operations by ID\\n/// used for easy acceptance as an argument in functions\\nstruct StoredOperations {\\n    mapping(uint64 => PriorityOperation) inner;\\n}\\n\\n/// @notice Indicator that the operation can interact with Rollup and Porter trees, or only with Rollup\\nenum OpTree {\\n    Full,\\n    Rollup\\n}\\n\\n/// @notice Priority operations queue type\\nenum QueueType {\\n    Deque,\\n    HeapBuffer,\\n    Heap\\n}\\n\",\"keccak256\":\"0x2ef35aee4840baf29036547cd7ec428889eaa17786c621d772a1bd4940ada2c2\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/chain-adapters/ZkSync_Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/AdapterInterface.sol\\\";\\nimport \\\"../interfaces/WETH9.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// Importing `Operations` contract which has the `QueueType` type\\nimport \\\"@matterlabs/zksync-contracts/l1/contracts/zksync/Operations.sol\\\";\\n\\ninterface ZkSyncLike {\\n    function requestL2Transaction(\\n        address _contractAddressL2,\\n        bytes calldata _calldata,\\n        uint256 _ergsLimit,\\n        bytes[] calldata _factoryDeps,\\n        QueueType _queueType\\n    ) external payable returns (bytes32 txHash);\\n}\\n\\ninterface ZkBridgeLike {\\n    function deposit(\\n        address _to,\\n        address _l1Token,\\n        uint256 _amount,\\n        QueueType _queueType\\n    ) external payable returns (bytes32 txHash);\\n}\\n\\n// solhint-disable-next-line contract-name-camelcase\\ncontract ZkSync_Adapter is AdapterInterface {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public immutable l2GasPrice = 1e9;\\n\\n    uint32 public immutable ergsLimit = 1_000_000;\\n\\n    WETH9 public immutable l1Weth = WETH9(0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6);\\n\\n    ZkSyncLike public immutable zkSync = ZkSyncLike(0xa0F968EbA6Bbd08F28Dc061C7856C15725983395);\\n    ZkBridgeLike public immutable zkErc20Bridge = ZkBridgeLike(0x7786255495348c08F82C09C82352019fAdE3BF29);\\n    ZkBridgeLike public immutable zkEthBridge = ZkBridgeLike(0xcbebcD41CeaBBC85Da9bb67527F58d69aD4DfFf5);\\n\\n    event ZkSyncMessageRelayed(bytes32 txHash);\\n\\n    function relayMessage(address target, bytes memory message) external payable override {\\n        uint256 txBaseCost = _contractHasSufficientEthBalance();\\n\\n        // Parameters passed to requestL2Transaction:\\n        // _contractAddressL2 is a parameter that defines the address of the contract to be called.\\n        // _calldata is a parameter that contains the calldata of the transaction call. It can be encoded the \\n        //  same way as on Ethereum.\\n        // _ergsLimit is a parameter that contains the ergs limit of the transaction call. You can learn more about \\n        //  ergs and the zkSync fee system here: https://v2-docs.zksync.io/dev/zksync-v2/fee-model.html\\n        // _factoryDeps is a list of bytecodes. It should contain the bytecode of the contract being deployed. \\n        //  If the contract being deployed is a factory contract, i.e. it can deploy other contracts, the array should also contain the bytecodes of the contracts that can be deployed by it.\\n        // _queueType is a parameter required for the priority mode functionality. For the testnet, \\n        //  QueueType.Deque should always be supplied.\\n\\n        // TODO: Figure out how to estimate the txBaseCost\\n        bytes32 txHash = zkSync.requestL2Transaction{ value: txBaseCost }(\\n            target,\\n            message,\\n            ergsLimit,\\n            new bytes[](0),\\n            QueueType.Deque\\n        );\\n\\n        emit MessageRelayed(target, message);\\n        emit ZkSyncMessageRelayed(txHash);\\n    }\\n\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token, // l2Token is unused.\\n        uint256 amount,\\n        address to\\n    ) external payable override {\\n        uint256 txBaseCost = _contractHasSufficientEthBalance();\\n\\n        // If the l1Token is weth then unwrap it to ETH then send the ETH to the standard bridge along with the base\\n        // cost.\\n        bytes32 txHash;\\n        if (l1Token == address(l1Weth)) {\\n            l1Weth.withdraw(amount);\\n            txHash = zkEthBridge.deposit{ value: txBaseCost + amount }(\\n                to,\\n                l1Token,\\n                amount,\\n                QueueType.Deque\\n            );\\n        }  else {\\n            IERC20(l1Token).safeIncreaseAllowance(address(zkErc20Bridge), amount);\\n            txHash = zkErc20Bridge.deposit{ value: txBaseCost }(\\n                to,\\n                l1Token,\\n                amount,\\n                QueueType.Deque\\n            );\\n        }\\n\\n        emit TokensRelayed(l1Token, l2Token, amount, to);\\n        emit ZkSyncMessageRelayed(txHash);\\n    }\\n\\n    function getL1CallValue() public pure returns (uint256) {\\n        return l2GasPrice * ergsLimit;\\n    }\\n\\n    function _contractHasSufficientEthBalance() internal view returns (uint256 requiredL1CallValue) {\\n        requiredL1CallValue = getL1CallValue();\\n        require(address(this).balance >= requiredL1CallValue, \\\"Insufficient ETH balance\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x7d14ef3e7874331c53ab97fd77890388acbb44be67e9e4e56a9a198efaedf7a7\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/AdapterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Sends cross chain messages and tokens to contracts on a specific L2 network.\\n */\\n\\ninterface AdapterInterface {\\n    event MessageRelayed(address target, bytes message);\\n\\n    event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to);\\n\\n    function relayMessage(address target, bytes calldata message) external payable;\\n\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x49ebe1ceb1ac746444ff74eba5e59510c964fce92c89ddbc95ac834a28a89640\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/WETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\ninterface WETH9 {\\n    function withdraw(uint256 wad) external;\\n\\n    function deposit() external payable;\\n\\n    function balanceOf(address guy) external view returns (uint256 wad);\\n\\n    function transfer(address guy, uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x7b444d0840b1f76eee9bf39d74830f70644395613b96cce2d80fc50785a82eaa\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610140604052633b9aca00608052620f424060a05273b4fbf271143f4fbf7b91a5ded31805e42b2208d660c05273a0f968eba6bbd08f28dc061c7856c1572598339560e052737786255495348c08f82c09c82352019fade3bf296101005273cbebcd41ceabbc85da9bb67527f58d69ad4dfff56101205234801561008257600080fd5b5060805160a05160c05160e05161010051610120516110e36101106000396000818161018c01526103b70152600081816102280152818161048701526104e90152600081816101c0015261062c01526000818160d5015281816102c4015261034401526000818161012e0152818161026901526106560152600081816101f4015261028b01526110e36000f3fe6080604052600436106100965760003560e01c80636bbc6c3d116100695780639ae366851161004e5780639ae36685146101e2578063bb3e04b514610216578063e6eb8ade1461024a57600080fd5b80636bbc6c3d1461017a5780637c19f005146101ae57600080fd5b806308f1ed151461009b578063146bf4b1146100c35780633ab307681461011c57806352c8c75c14610165575b600080fd5b3480156100a757600080fd5b506100b061025d565b6040519081526020015b60405180910390f35b3480156100cf57600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ba565b34801561012857600080fd5b506101507f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016100ba565b610178610173366004610c78565b6102b4565b005b34801561018657600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b3480156101ba57600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b3480156101ee57600080fd5b506100b07f000000000000000000000000000000000000000000000000000000000000000081565b34801561022257600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b610178610258366004610cf4565b610607565b60006102af63ffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000610e03565b905090565b60006102be610783565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff160361046b576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561039d57600080fd5b505af11580156103b1573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637f63f61885846103fd9190610e40565b85898860006040518663ffffffff1660e01b81526004016104219493929190610e93565b60206040518083038185885af115801561043f573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104649190610ed5565b905061056d565b6104ac73ffffffffffffffffffffffffffffffffffffffff87167f000000000000000000000000000000000000000000000000000000000000000086610801565b6040517f7f63f61800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690637f63f6189084906105279087908b908a90600090600401610e93565b60206040518083038185885af1158015610545573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061056a9190610ed5565b90505b6040805173ffffffffffffffffffffffffffffffffffffffff888116825287811660208301528183018790528516606082015290517fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9181900360800190a16040518181527f82e577407245f8e8c446b39602dae3fffacbc21172a51c88525e050063929b2f9060200160405180910390a1505050505050565b6000610611610783565b9050600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663b4848df58386867f0000000000000000000000000000000000000000000000000000000000000000866040519080825280602002602001820160405280156106a957816020015b60608152602001906001900390816106945790505b5060006040518763ffffffff1660e01b81526004016106cc959493929190610f64565b60206040518083038185885af11580156106ea573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061070f9190610ed5565b90507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac4848460405161074292919061102d565b60405180910390a16040518181527f82e577407245f8e8c446b39602dae3fffacbc21172a51c88525e050063929b2f9060200160405180910390a150505050565b600061078d61025d565b9050804710156107fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e6365000000000000000060448201526064015b60405180910390fd5b90565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190610ed5565b6108a69190610e40565b6040805173ffffffffffffffffffffffffffffffffffffffff8616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905290915061093690859061093c565b50505050565b600061099e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a4d9092919063ffffffff16565b805190915015610a4857808060200190518101906109bc919061105c565b610a48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107f5565b505050565b6060610a5c8484600085610a66565b90505b9392505050565b606082471015610af8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107f5565b73ffffffffffffffffffffffffffffffffffffffff85163b610b76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107f5565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b9f919061107e565b60006040518083038185875af1925050503d8060008114610bdc576040519150601f19603f3d011682016040523d82523d6000602084013e610be1565b606091505b5091509150610bf1828286610bfc565b979650505050505050565b60608315610c0b575081610a5f565b825115610c1b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f5919061109a565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c7357600080fd5b919050565b60008060008060808587031215610c8e57600080fd5b610c9785610c4f565b9350610ca560208601610c4f565b925060408501359150610cba60608601610c4f565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215610d0757600080fd5b610d1083610c4f565b9150602083013567ffffffffffffffff80821115610d2d57600080fd5b818501915085601f830112610d4157600080fd5b813581811115610d5357610d53610cc5565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610d9957610d99610cc5565b81604052828152886020848701011115610db257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e3b57610e3b610dd4565b500290565b60008219821115610e5357610e53610dd4565b500190565b60038110610e8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b73ffffffffffffffffffffffffffffffffffffffff8581168252841660208201526040810183905260808101610ecc6060830184610e58565b95945050505050565b600060208284031215610ee757600080fd5b5051919050565b60005b83811015610f09578181015183820152602001610ef1565b838111156109365750506000910152565b60008151808452610f32816020860160208601610eee565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff861681526000602060a081840152610f9460a0840188610f1a565b63ffffffff871660408501528381036060850152855180825282820190600581901b8301840184890160005b8381101561100c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0868403018552610ffa838351610f1a565b94870194925090860190600101610fc0565b505080955050505050506110236080830184610e58565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000610a5c6040830184610f1a565b60006020828403121561106e57600080fd5b81518015158114610a5f57600080fd5b60008251611090818460208701610eee565b9190910192915050565b602081526000610a5f6020830184610f1a56fea26469706673582212204ba0519e173cd9a1d6c958c87eb2e090619f74168759e8c7ab77b29c7ec06aa864736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100965760003560e01c80636bbc6c3d116100695780639ae366851161004e5780639ae36685146101e2578063bb3e04b514610216578063e6eb8ade1461024a57600080fd5b80636bbc6c3d1461017a5780637c19f005146101ae57600080fd5b806308f1ed151461009b578063146bf4b1146100c35780633ab307681461011c57806352c8c75c14610165575b600080fd5b3480156100a757600080fd5b506100b061025d565b6040519081526020015b60405180910390f35b3480156100cf57600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ba565b34801561012857600080fd5b506101507f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016100ba565b610178610173366004610c78565b6102b4565b005b34801561018657600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b3480156101ba57600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b3480156101ee57600080fd5b506100b07f000000000000000000000000000000000000000000000000000000000000000081565b34801561022257600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b610178610258366004610cf4565b610607565b60006102af63ffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000610e03565b905090565b60006102be610783565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff160361046b576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561039d57600080fd5b505af11580156103b1573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637f63f61885846103fd9190610e40565b85898860006040518663ffffffff1660e01b81526004016104219493929190610e93565b60206040518083038185885af115801561043f573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104649190610ed5565b905061056d565b6104ac73ffffffffffffffffffffffffffffffffffffffff87167f000000000000000000000000000000000000000000000000000000000000000086610801565b6040517f7f63f61800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690637f63f6189084906105279087908b908a90600090600401610e93565b60206040518083038185885af1158015610545573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061056a9190610ed5565b90505b6040805173ffffffffffffffffffffffffffffffffffffffff888116825287811660208301528183018790528516606082015290517fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9181900360800190a16040518181527f82e577407245f8e8c446b39602dae3fffacbc21172a51c88525e050063929b2f9060200160405180910390a1505050505050565b6000610611610783565b9050600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663b4848df58386867f0000000000000000000000000000000000000000000000000000000000000000866040519080825280602002602001820160405280156106a957816020015b60608152602001906001900390816106945790505b5060006040518763ffffffff1660e01b81526004016106cc959493929190610f64565b60206040518083038185885af11580156106ea573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061070f9190610ed5565b90507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac4848460405161074292919061102d565b60405180910390a16040518181527f82e577407245f8e8c446b39602dae3fffacbc21172a51c88525e050063929b2f9060200160405180910390a150505050565b600061078d61025d565b9050804710156107fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e6365000000000000000060448201526064015b60405180910390fd5b90565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190610ed5565b6108a69190610e40565b6040805173ffffffffffffffffffffffffffffffffffffffff8616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905290915061093690859061093c565b50505050565b600061099e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a4d9092919063ffffffff16565b805190915015610a4857808060200190518101906109bc919061105c565b610a48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107f5565b505050565b6060610a5c8484600085610a66565b90505b9392505050565b606082471015610af8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107f5565b73ffffffffffffffffffffffffffffffffffffffff85163b610b76576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107f5565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b9f919061107e565b60006040518083038185875af1925050503d8060008114610bdc576040519150601f19603f3d011682016040523d82523d6000602084013e610be1565b606091505b5091509150610bf1828286610bfc565b979650505050505050565b60608315610c0b575081610a5f565b825115610c1b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f5919061109a565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c7357600080fd5b919050565b60008060008060808587031215610c8e57600080fd5b610c9785610c4f565b9350610ca560208601610c4f565b925060408501359150610cba60608601610c4f565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215610d0757600080fd5b610d1083610c4f565b9150602083013567ffffffffffffffff80821115610d2d57600080fd5b818501915085601f830112610d4157600080fd5b813581811115610d5357610d53610cc5565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610d9957610d99610cc5565b81604052828152886020848701011115610db257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e3b57610e3b610dd4565b500290565b60008219821115610e5357610e53610dd4565b500190565b60038110610e8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b73ffffffffffffffffffffffffffffffffffffffff8581168252841660208201526040810183905260808101610ecc6060830184610e58565b95945050505050565b600060208284031215610ee757600080fd5b5051919050565b60005b83811015610f09578181015183820152602001610ef1565b838111156109365750506000910152565b60008151808452610f32816020860160208601610eee565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff861681526000602060a081840152610f9460a0840188610f1a565b63ffffffff871660408501528381036060850152855180825282820190600581901b8301840184890160005b8381101561100c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0868403018552610ffa838351610f1a565b94870194925090860190600101610fc0565b505080955050505050506110236080830184610e58565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000610a5c6040830184610f1a565b60006020828403121561106e57600080fd5b81518015158114610a5f57600080fd5b60008251611090818460208701610eee565b9190910192915050565b602081526000610a5f6020830184610f1a56fea26469706673582212204ba0519e173cd9a1d6c958c87eb2e090619f74168759e8c7ab77b29c7ec06aa864736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
